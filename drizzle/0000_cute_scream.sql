-- Current sql file was generated after introspecting the database
-- If you want to run this migration please uncomment this code before executing migrations
/*
CREATE TABLE "ActivitiesUser" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""ActivitiesUser_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_id" uuid NOT NULL,
	"activity_id" uuid NOT NULL,
	"is_completed" boolean DEFAULT false NOT NULL,
	"system_code" varchar
);
--> statement-breakpoint
ALTER TABLE "ActivitiesUser" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "FansInfo" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""FansInfo_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"b_id" varchar,
	"user_name" varchar,
	"avatar" varchar,
	"sign" varchar
);
--> statement-breakpoint
CREATE TABLE "LikeRecord" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""LikeRecord_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"comment_id" bigint,
	"type" smallint,
	"user_id" uuid DEFAULT auth.uid(),
	"like_user_id" uuid,
	"liked" boolean DEFAULT true NOT NULL,
	"type_index" smallint DEFAULT '0' NOT NULL,
	"post_id" uuid
);
--> statement-breakpoint
ALTER TABLE "LikeRecord" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "ProductsInfo" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name "products_info_id_seq" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1 CACHE 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" varchar,
	"description" varchar,
	"type" integer,
	"post_id" uuid,
	"web_url" varchar,
	"keywords" bigint[],
	"pay_type" varchar,
	"score_num" integer,
	"icon_url" varchar,
	"is_verify" boolean,
	"provider_id" uuid,
	"pay_text" varchar,
	"hot_num" bigint
);
--> statement-breakpoint
ALTER TABLE "ProductsInfo" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "likes" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
	"user_id" uuid NOT NULL,
	"land_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "likes" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "profiles" (
	"id" uuid PRIMARY KEY NOT NULL,
	"name" text,
	"username" text,
	"avatar_url" text,
	"block_coins" integer DEFAULT 0 NOT NULL,
	"land_coins" integer DEFAULT 0 NOT NULL
);
--> statement-breakpoint
ALTER TABLE "profiles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "UserCustomList" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" varchar,
	"describe" varchar,
	"type" smallint NOT NULL,
	"status" smallint DEFAULT '0' NOT NULL,
	"owner" uuid DEFAULT auth.uid() NOT NULL,
	"sort" integer DEFAULT 0 NOT NULL
);
--> statement-breakpoint
ALTER TABLE "UserCustomList" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "land_info" (
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"land_name" varchar NOT NULL,
	"land_owner" uuid,
	"land_level" varchar DEFAULT '0' NOT NULL,
	"land_type" varchar DEFAULT '0' NOT NULL,
	"capacity_size" integer,
	"used_pixel_blocks" integer DEFAULT 0 NOT NULL,
	"cover_icon_url" varchar,
	"world_coordinates_x" integer NOT NULL,
	"world_coordinates_y" integer NOT NULL,
	"world_size_x" integer NOT NULL,
	"world_size_y" integer NOT NULL,
	"land_description" varchar,
	"parent_land_id" uuid,
	"use_external_link" boolean DEFAULT false NOT NULL,
	"external_link_type" varchar,
	"external_link" varchar,
	"border_size" smallint DEFAULT '0' NOT NULL,
	"skip_url" varchar,
	"fill_color" varchar DEFAULT '#000000' NOT NULL,
	"block_count" smallint DEFAULT '1' NOT NULL,
	"land_status" varchar DEFAULT '0' NOT NULL,
	"show_cover_list" jsonb[]
);
--> statement-breakpoint
ALTER TABLE "land_info" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "CommentRecord" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""CommentRecord_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"parent_id" bigint DEFAULT '0' NOT NULL,
	"comment_id" bigint,
	"content" varchar,
	"image_url" varchar,
	"like_num" integer DEFAULT 0 NOT NULL,
	"post_id" uuid,
	"user_id" uuid NOT NULL
);
--> statement-breakpoint
ALTER TABLE "CommentRecord" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "Keyword" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""Keyword_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"color" varchar,
	"description" varchar,
	"label_name" varchar,
	"label_type" smallint DEFAULT '0',
	"user_id" uuid DEFAULT auth.uid(),
	CONSTRAINT "Keyword_id_key" UNIQUE("id")
);
--> statement-breakpoint
ALTER TABLE "Keyword" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "Activities" (
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"name" varchar NOT NULL,
	"type" varchar NOT NULL,
	"description" text,
	"post_id" uuid,
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"is_valid" boolean DEFAULT true NOT NULL,
	"system_code" varchar,
	CONSTRAINT "Activities_id_key" UNIQUE("id")
);
--> statement-breakpoint
ALTER TABLE "Activities" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "PixelInfo" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""PixelInfo_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"x" smallint,
	"y" smallint,
	"width" smallint,
	"height" smallint,
	"fill_color" varchar,
	"image_src" varchar,
	"name" varchar,
	"type" smallint,
	"skip_type" smallint,
	"skip_url" text
);
--> statement-breakpoint
ALTER TABLE "PixelInfo" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "PxCmtyArticles" (
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"content" varchar,
	"description" varchar,
	"comment_record_num" smallint DEFAULT '0',
	"banner_img_url" varchar,
	"title" varchar,
	"id" uuid PRIMARY KEY DEFAULT gen_random_uuid() NOT NULL,
	"keywords" bigint[],
	"user_id" uuid DEFAULT auth.uid() NOT NULL,
	"like_array" smallint[]
);
--> statement-breakpoint
ALTER TABLE "PxCmtyArticles" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "RejectRecord" (
	"id" bigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY (sequence name ""RejectRecord_id_seq"" INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START WITH 1),
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"type" smallint,
	"user_id" uuid DEFAULT auth.uid(),
	"status" boolean,
	"describe" varchar,
	"post_id" uuid
);
--> statement-breakpoint
ALTER TABLE "RejectRecord" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "UserCustomItem" (
	"created_at" timestamp with time zone DEFAULT now() NOT NULL,
	"user_custom_list_id" uuid NOT NULL,
	"land_id" uuid NOT NULL,
	"sort" integer DEFAULT 0 NOT NULL,
	"owner" uuid DEFAULT auth.uid() NOT NULL
);
--> statement-breakpoint
ALTER TABLE "UserCustomItem" ENABLE ROW LEVEL SECURITY;--> statement-breakpoint
CREATE TABLE "tasks" (
	"id" varchar(30) PRIMARY KEY NOT NULL,
	"code" varchar(128) NOT NULL,
	"title" varchar(128),
	"status" varchar(30) DEFAULT 'todo' NOT NULL,
	"label" varchar(30) DEFAULT 'bug' NOT NULL,
	"priority" varchar(30) DEFAULT 'low' NOT NULL,
	"archived" boolean DEFAULT false NOT NULL,
	"created_at" timestamp DEFAULT now() NOT NULL,
	"updated_at" timestamp DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT "tasks_code_unique" UNIQUE("code")
);
--> statement-breakpoint
ALTER TABLE "ActivitiesUser" ADD CONSTRAINT "ActivitiesUser_activity_id_fkey" FOREIGN KEY ("activity_id") REFERENCES "public"."Activities"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "ActivitiesUser" ADD CONSTRAINT "ActivitiesUser_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "LikeRecord" ADD CONSTRAINT "likerecord_comment_id_fkey" FOREIGN KEY ("comment_id") REFERENCES "public"."CommentRecord"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "LikeRecord" ADD CONSTRAINT "likerecord_like_user_id_fkey" FOREIGN KEY ("like_user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "LikeRecord" ADD CONSTRAINT "likerecord_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."PxCmtyArticles"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "LikeRecord" ADD CONSTRAINT "likerecord_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "likes" ADD CONSTRAINT "likes_land_id_fkey" FOREIGN KEY ("land_id") REFERENCES "public"."land_info"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "likes" ADD CONSTRAINT "likes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "profiles" ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "UserCustomList" ADD CONSTRAINT "UserCustomList_owner_fkey" FOREIGN KEY ("owner") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "land_info" ADD CONSTRAINT "public_land_info_land_owner_fkey" FOREIGN KEY ("land_owner") REFERENCES "public"."profiles"("id") ON DELETE cascade ON UPDATE cascade;--> statement-breakpoint
ALTER TABLE "CommentRecord" ADD CONSTRAINT "commentrecord_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."PxCmtyArticles"("id") ON DELETE set null ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "CommentRecord" ADD CONSTRAINT "commentrecord_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "Keyword" ADD CONSTRAINT "keyword_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "PxCmtyArticles" ADD CONSTRAINT "PxCmtyArticles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "RejectRecord" ADD CONSTRAINT "rejectrecord_post_id_fkey" FOREIGN KEY ("post_id") REFERENCES "public"."PxCmtyArticles"("id") ON DELETE no action ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "UserCustomItem" ADD CONSTRAINT "UserCustomItem_land_id_fkey" FOREIGN KEY ("land_id") REFERENCES "public"."land_info"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
ALTER TABLE "UserCustomItem" ADD CONSTRAINT "UserCustomItem_user_custom_list_id_fkey" FOREIGN KEY ("user_custom_list_id") REFERENCES "public"."UserCustomList"("id") ON DELETE cascade ON UPDATE no action;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "ActivitiesUser" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "ActivitiesUser" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable delete for authenticated users only" ON "LikeRecord" AS PERMISSIVE FOR DELETE TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "LikeRecord" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "LikeRecord" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "LikeRecord" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "ProductsInfo" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "ProductsInfo" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "ProductsInfo" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "authenticated users can delete their own likes" ON "likes" AS PERMISSIVE FOR DELETE TO "authenticated" USING ((user_id = ( SELECT auth.uid() AS uid)));--> statement-breakpoint
CREATE POLICY "authenticated users can insert their own likes" ON "likes" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "authenticated users can select likes" ON "likes" AS PERMISSIVE FOR SELECT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "profiles" AS PERMISSIVE FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "anyone can select profiles" ON "profiles" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable Update for authenticated users only" ON "UserCustomList" AS PERMISSIVE FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "UserCustomList" AS PERMISSIVE FOR DELETE TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "UserCustomList" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "UserCustomList" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable delete for users based on user_id" ON "land_info" AS PERMISSIVE FOR DELETE TO public USING (true);--> statement-breakpoint
CREATE POLICY "Enable update for users based on user_id" ON "land_info" AS PERMISSIVE FOR UPDATE TO public;--> statement-breakpoint
CREATE POLICY "auth users can insert" ON "land_info" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "public read access for all users" ON "land_info" AS PERMISSIVE FOR SELECT TO "anon", "authenticated";--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "CommentRecord" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "CommentRecord" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "Keyword" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "Keyword" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "Activities" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "Activities" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "PixelInfo" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "PixelInfo" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "PxCmtyArticles" AS PERMISSIVE FOR INSERT TO "authenticated" WITH CHECK (true);--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "PxCmtyArticles" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "PxCmtyArticles" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable delete for authenticated users only" ON "RejectRecord" AS PERMISSIVE FOR DELETE TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "RejectRecord" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "RejectRecord" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "RejectRecord" AS PERMISSIVE FOR UPDATE TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable delete for authenticated users only" ON "UserCustomItem" AS PERMISSIVE FOR DELETE TO "authenticated" USING (true);--> statement-breakpoint
CREATE POLICY "Enable insert for authenticated users only" ON "UserCustomItem" AS PERMISSIVE FOR INSERT TO "authenticated";--> statement-breakpoint
CREATE POLICY "Enable read access for all users" ON "UserCustomItem" AS PERMISSIVE FOR SELECT TO public;--> statement-breakpoint
CREATE POLICY "Enable update for authenticated users only" ON "UserCustomItem" AS PERMISSIVE FOR UPDATE TO "authenticated";
*/